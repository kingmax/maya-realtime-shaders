//lcReprojectPSFull.cgh

float3 normalsTangent(float3 normalTexture,
                      float3 Nn,
                      float3 Bn,
                      float3 Tn,
                      bool   invertGreen,
											float  normalIntensity)
{
  if(invertGreen)normalTexture.g = 1.0 - normalTexture.g;
  float3 normalValues = normalTexture * 2.0 - 1.0;
  if (normalIntensity > 0) Nn = normalize((normalValues.x*Tn*normalIntensity )+(normalValues.y*Bn*normalIntensity )+(normalValues.z*Nn ) );

  return Nn;
}

float fresnelBasic(float3 N, float3 V, float fresnelExp) //this is the most basic approximation of the fresnel function
{
    return max(0.f,pow(abs(1.0-dot(N,V)),fresnelExp));
}

float3 rotateVectorAboutY(float angle, float3 vec)
{
	angle = radians(angle);
  float3x3 rotationMatrix ={float3(cos(angle),0.0,sin(angle)),
  													float3(0.0,1.0,0.0),
  													float3(-sin(angle),0.0,cos(angle))};
  return mul(vec, rotationMatrix);
}

float3 rotateVectorAboutX(float angle, float3 vec)
{
	angle = radians(angle);
  float3x3 rotationMatrix ={float3(1.0,0.0,0.0),
  													float3(0.0,cos(angle),-sin(angle)),  													
  													float3(0.0,sin(angle),cos(angle))};
  return mul(vec, rotationMatrix);
}

float3 rotateVectorAboutZ(float angle, float3 vec)
{
	angle = radians(angle);
  float3x3 rotationMatrix ={float3(cos(angle),-sin(angle),0.0),  													
  													float3(sin(angle),cos(angle),0.0),
  													float3(0.0,0.0,1.0)};
  return mul(vec, rotationMatrix);
}

float3 tangentVector(float3 inVector, float3 N, float3 T, float3 B) // compute TangentSpace vector - Brice Vandemoortele (http://www.mentalwarp.com)
{
	float3 vectorlTangent;

	vectorlTangent.x = dot(inVector.xyz, T);
	vectorlTangent.y = dot(inVector.xyz, B);
	vectorlTangent.z = dot(inVector.xyz, N);

	return normalize(vectorlTangent);
}

//================================================
//     Full Shading
//================================================
float4 PSFull (vert2pixel IN) : COLOR
{
	float3 V   = normalize(IN.eyeVec);
  float3 Nw  = normalize(IN.worldNormal);
  float3 Bw  = normalize(IN.worldBinormal);
  float3 Tw  = normalize(IN.worldTangent);
  float3 Tc = mul(float4(IN.worldTangent,1),  ViewInverse).xyz; //transform to View/Camera
  float3 Bc = mul(float4(IN.worldBinormal,1), ViewInverse).xyz; //transform to View/Camera
  float3 Nc = mul(float4(IN.worldNormal,1),   ViewInverse).xyz; //transform to View/Camera
  float2 UV = IN.UV.xy;
	float3 N = Nw;	
  float3 Nsphere = normalize(Nc);
	
	if (useNormalTexture)
  {
  	N       = normalsTangent(tex2D(normalTextureSampler, UV),
                           	 normalize(Nw),
                             normalize(Bw),
                             normalize(Tw),
                             invertNormalGreen,
                             normalsScale);
 		Nsphere = normalsTangent(tex2D(normalTextureSampler, UV),
                           	 normalize(Nc),
                             normalize(Bc),
                             normalize(Tc),
                             invertNormalGreen,
                             normalsScale);
  }
  
  float3 Color = lerp(float3(0.5,0.5,0.5), float3(0.5,0.4,0.45), fresnelBasic(N, V, 2.0));
  float3 R = reflect(-V,N); 
	float  Alpha = 1.0;
	float iX = 1;
  float iY = 1;
  if (litSphereFlipX) iX = -1;
  if (litSphereFlipY) iY = -1;
  

  

  //Initialize textures
  float4 Ct = tex2D(colorTextureSampler, UV);
  float3 envCube = pow(abs(texCUBElod(envCubeTextureSampler, float4(rotateVectorAboutZ(envRotationZ, rotateVectorAboutX(envRotationX, rotateVectorAboutY(envRotationY, R))),envBlur)).rgb), envPower)*envMultiplier;
  float3 litSphere = tex2D(litSphereTextureSampler, float2(0.49*iX,-0.49*iY*FIXCOORD) * Nsphere.xy + 0.5).rgb;
  float3 normals = 0.5+tangentVector(N, Nw, Tw, Bw)*0.5;
  
  
  if(outputColorTexture) Color = Ct.rgb;
  if(outputNormalsTexture) Color = normals;
  if(outputEnvCubeTexture) Color = envCube;
  if(outputLitSphereTexture) Color = litSphere;
  
  return float4(Color, 1.0 );
}